package com.geekbrains.lesson3;

/*
исключение является объектом, класс объекта отличается в зависимости от ошибки.
 
checked исключения должны обязательно быть обработаны, иначе будет ошибка на этапе компиляции.
 
unchecked исключения ничто не заставляет обрабатывать.
 
если не перехватить исключение, то оно "долетит" до стандартного обработчика исключений Java
 	  и в консоль будет выведен stack trace (стек вызовов) и программа завершит работу.
 	  
верхняя строка стек трейса указывает где возникло исключение.

нижняя строка стек трейса указывает с чего начался выброс исключения.

если исключение перехватить то программа продолжит работать.

весь код, который идет после выброса исключения и до catch, пропускается.
	 при этом код в блоке finally срабатывает всегда.

e.printStackTrace используется для нежелательных исключений.

Exception разных типов должны ловиться соответствующими catch, иначе они полетят дальше.

Два одинаковых catch одновременно сработать не могут, сработает только один.

по родителю можно ловить наследника (при перехвате срабатывает наследование).

если используется подкласс и суперкласс исключений, то сначала нужно ловить подкласс,
 	 а потом суперкласс.  
 
исключения нужно ловить прицельно соответствующим catch.

try/catch могут быть вложены в try и в catch.

exception летит по стеку и может быть перехвачено в любом методе по пути вызовов.

exception означает, что Java не знает, как поступить в данной ситуации.

если невозможно корректно обработать исключение здесь и сейчас,
	 нужно пробросить его выше с помощью throws.
	 
try-with-resources работает только с объектами классов, поддерживающих
 	интерфейс AutoCloseable.
 	
для своих исключений лучше сначала создавать корневое и от него наследовать остальные. 	
*/

public class Info {
	
}
